apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: node
spec:
  podManagementPolicy: "Parallel"
  selector:
    matchLabels:
      app: node
  serviceName: node
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: node
      annotations:
        ad.datadoghq.com/log-app.logs: |
          [{"source": "agd", "service":"agd"}]
        ad.datadoghq.com/log-slog.logs: |
          [{"source": "slog", "service":"agd"}]
        ad.datadoghq.com/log-otel.logs: |
          [{"source": "otel", "service":"instagoric"}]
        ad.datadoghq.com/log-server.logs: |
          [{"source": "server", "service":"instagoric"}]
        ad.datadoghq.com/node.logs: |
          [{"source": "entrypoint", "service":"instagoric"}]

    spec:
      terminationGracePeriodSeconds: 10
      serviceAccountName: opentracing-agent
      containers:
        - name: node
          image: ghcr.io/agoric/agoric-sdk
          command: ["/bin/bash"]
          securityContext:
            capabilities:
              add:
                - SYS_PTRACE

          args: ["-x", "/entrypoint/entrypoint.sh"]
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: PODNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: BOOTSTRAP_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: instagoric-release
                  key: BOOTSTRAP_CONFIG
                  optional: true
            - name: NETPURPOSE
              valueFrom:
                configMapKeyRef:
                  name: instagoric-release
                  key: NETPURPOSE
                  optional: true
            - name: CHAIN_ID
              valueFrom:
                configMapKeyRef:
                  name: instagoric-release
                  key: CHAIN_ID
                  optional: true
            - name: AG0_MODE
              valueFrom:
                configMapKeyRef:
                  name: instagoric-release
                  key: AG0_MODE
                  optional: true
            - name: VOTING_PERIOD
              valueFrom:
                configMapKeyRef:
                  name: instagoric-release
                  key: VOTING_PERIOD
                  optional: true
            - name: ENABLE_XSNAP_DEBUG
              valueFrom:
                configMapKeyRef:
                  name: instagoric-release
                  key: ENABLE_XSNAP_DEBUG
                  optional: true
            - name: HONEYCOMB_DATASET
              valueFrom:
                configMapKeyRef:
                  name: instagoric-release
                  key: HONEYCOMB_DATASET
                  optional: true
            - name: BLOCK_COMPUTE_LIMIT
              valueFrom:
                configMapKeyRef:
                  name: instagoric-release
                  key: BLOCK_COMPUTE_LIMIT
                  optional: true
            - name: GC_INTERVAL
              valueFrom:
                configMapKeyRef:
                  name: instagoric-release
                  key: GC_INTERVAL
                  optional: true
            - name: CONSENSUS_TIMEOUT_PROPOSE
              valueFrom:
                configMapKeyRef:
                  name: instagoric-release
                  key: CONSENSUS_TIMEOUT_PROPOSE
                  optional: true
            - name: CONSENSUS_TIMEOUT_COMMIT
              valueFrom:
                configMapKeyRef:
                  name: instagoric-release
                  key: CONSENSUS_TIMEOUT_COMMIT
                  optional: true
            - name: CONSENSUS_TIMEOUT_PREVOTE
              valueFrom:
                configMapKeyRef:
                  name: instagoric-release
                  key: CONSENSUS_TIMEOUT_PREVOTE
                  optional: true
            - name: CONSENSUS_TIMEOUT_PRECOMMIT
              valueFrom:
                configMapKeyRef:
                  name: instagoric-release
                  key: CONSENSUS_TIMEOUT_PRECOMMIT
                  optional: true
            - name: NODE_HEAP_SNAPSHOTS
              valueFrom:
                configMapKeyRef:
                  name: instagoric-release
                  key: NODE_HEAP_SNAPSHOTS
                  optional: true
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: PRUNING
              valueFrom:
                configMapKeyRef:
                  name: instagoric-release
                  key: PRUNING
                  optional: true
            - name: WHALE_SEED
              valueFrom:
                secretKeyRef:
                  name: instagoric-secrets
                  key: WHALE_SEED
                  optional: true
            - name: FAUCET_ADDRESS
              valueFrom:
                secretKeyRef:
                  name: instagoric-secrets
                  key: FAUCET_ADDRESS
                  optional: true
            - name: HONEYCOMB_API_KEY
              valueFrom:
                secretKeyRef:
                  name: telemetry-secrets
                  key: HONEYCOMB_API_KEY
                  optional: true
            - name: DD_API_KEY
              valueFrom:
                secretKeyRef:
                  name: telemetry-secrets
                  key: DD_API_KEY
                  optional: true
            - name: DD_SITE
              valueFrom:
                secretKeyRef:
                  name: telemetry-secrets
                  key: DD_SITE
                  optional: true
            - name: DD_TRACE_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: instagoric-release
                  key: DD_TRACE_ENABLED
                  optional: true
            - name: DD_PROFILING_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: instagoric-release
                  key: DD_PROFILING_ENABLED
                  optional: true
            - name: ENABLE_TELEMETRY
              valueFrom:
                secretKeyRef:
                  name: telemetry-secrets
                  key: ENABLE_TELEMETRY
                  optional: true
            - name: ECON_SOLO_SEED
              valueFrom:
                secretKeyRef:
                  name: instagoric-secrets
                  key: ECON_SOLO_SEED
                  optional: true
            - name: PSM_GOV_A
              valueFrom:
                secretKeyRef:
                  name: instagoric-secrets
                  key: PSM_GOV_A
                  optional: true
            - name: PSM_GOV_B
              valueFrom:
                secretKeyRef:
                  name: instagoric-secrets
                  key: PSM_GOV_B
                  optional: true
            - name: PSM_GOV_C
              valueFrom:
                secretKeyRef:
                  name: instagoric-secrets
                  key: PSM_GOV_C
                  optional: true
            - name: NETNAME
              valueFrom:
                configMapKeyRef:
                  name: instagoric-release
                  key: NETNAME
            - name: NETDOMAIN
              valueFrom:
                configMapKeyRef:
                  name: instagoric-release
                  key: NETDOMAIN
                  optional: true
            - name: DOCKERTAG
              valueFrom:
                configMapKeyRef:
                  name: instagoric-release
                  key: DOCKERTAG
                  optional: true
            - name: DELEGATE_AMOUNT
              valueFrom:
                configMapKeyRef:
                  name: instagoric-release
                  key: DELEGATE_AMOUNT
                  optional: true
            - name: CLIENT_AMOUNT
              valueFrom:
                configMapKeyRef:
                  name: instagoric-release
                  key: CLIENT_AMOUNT
                  optional: true
            - name: SLOGSENDER_AGENT
              valueFrom:
                configMapKeyRef:
                  name: instagoric-release
                  key: SLOGSENDER_AGENT
                  optional: true
            - name: SLOGSENDER_AGENT_DD_PROFILING_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: instagoric-release
                  key: SLOGSENDER_AGENT_DD_PROFILING_ENABLED
                  optional: true
            - name: ENDORSED_UI
              valueFrom:
                configMapKeyRef:
                  name: instagoric-release
                  key: ENDORSED_UI
                  optional: true
            - name: OTEL_EXPORTER_PROMETHEUS_PORT
              value: "26661"
            # The k8s.pod.ip is used to associate pods for k8sattributes
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: "k8s.pod.ip=$(POD_IP)"
          ports:
            - containerPort: 26656
              name: p2p
            - containerPort: 26657
              name: rpc
            - containerPort: 8000
              name: captp
            - containerPort: 8001
              name: sidekick
            - containerPort: 8002
              name: sidekickprivate
            - containerPort: 9090
              name: grpc
            - containerPort: 26652
              name: prometheus
            - containerPort: 26660
              name: swingset
            - containerPort: 26661
              name: prom
            - containerPort: 1317
              name: api
          # Can we somehow detect errors that are recoverable by restarting the node?
          # My feeling is that the only one of these would be if the daemon exits, which
          # is already handled by normal container restarts.
          # startupProbe:
          #   httpGet:
          #     path: /health
          #     port: rpc
          #   failureThreshold: 120
          #   periodSeconds: 10
          # livenessProbe:
          #   httpGet:
          #     path: /health
          #     port: rpc
          #   failureThreshold: 3
          #   periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - bash
                - -c
                - |
                  # Try to see if the node is still catching up.
                  ([[ $(agd status | jq -r .SyncInfo.catching_up) == false ]]) &
                  tester=$!
                  # Kill the test if it takes longer than we expect.
                  (sleep 5; kill $tester 2>/dev/null) &
                  killer=$!
                  # Kill the killer before exiting.
                  trap 'kill $killer 2>/dev/null' EXIT
                  # Return the test's exit code, whether it succeeded, failed, or was killed.
                  wait $tester
            initialDelaySeconds: 10
            periodSeconds: 10
          volumeMounts:
            - name: state
              mountPath: /state
            - name: entrypoint
              mountPath: /entrypoint
            - name: network-config
              mountPath: /config/network
            - name: otel-config
              mountPath: /config/otel
            - name: server
              mountPath: /config/server
            - name: store-stats
              mountPath: /config/store-stats
          resources:
            limits:
              cpu: 1000m
              ephemeral-storage: 5Gi
              memory: 8Gi
            requests:
              cpu: 100m
              ephemeral-storage: 5Gi
              memory: 2Gi
        # - name: grpc-hc
        #   image: docker.io/salrashid123/grpc_health_proxy:1.0.0
        #   args: 
        #     - '--grpcaddr=localhost:9090'
        #     - '--http-listen-addr=0.0.0.0:8080'
        #     - '--logtostderr=1'
        #   ports:
        #     - containerPort: 8080
        #       name: grpc-hc
        #   # FIXME: Help, please, Ari!
        #   # Warning: Autopilot increased resource requests for StatefulSet
        #   # instagoric/validator to meet requirements.  See
        #   # http://g.co/gke/autopilot-resources.
        #   resources:
        #     limits:
        #       cpu: 500m
        #       ephemeral-storage: 1Gi
        #       memory: 3Gi
        #     requests:
        #       cpu: 250m
        #       ephemeral-storage: 1Gi
        #       memory: 1Gi
        - name: log-app
          image: busybox:latest
          args: [/bin/sh, -c, 'tail -n 10 -F /state/app.log']
          volumeMounts:
          - name: state
            mountPath: /state
            readOnly: true
          resources:
            limits:
              cpu: 100m
              ephemeral-storage: 1Gi
              memory: 50Mi
            requests:
              cpu: 100m
              ephemeral-storage: 1Gi
              memory: 50Mi
        - name: log-slog
          image: busybox:latest
          args: [/bin/sh, -c, 'tail -n 10 -F /state/slogfile_current.json']
          volumeMounts:
          - name: state
            mountPath: /state
            readOnly: true
          resources:
            limits:
              cpu: 100m
              ephemeral-storage: 1Gi
              memory: 50Mi
            requests:
              cpu: 100m
              ephemeral-storage: 1Gi
              memory: 50Mi
        - name: log-otel
          image: busybox:latest
          args: [/bin/sh, -c, 'tail -n 10 -F /state/otel.log']
          volumeMounts:
          - name: state
            mountPath: /state
            readOnly: true
          resources:
            limits:
              cpu: 100m
              ephemeral-storage: 1Gi
              memory: 50Mi
            requests:
              cpu: 100m
              ephemeral-storage: 1Gi
              memory: 50Mi
        - name: log-server
          image: busybox:latest
          args: [/bin/sh, -c, 'tail -n 10 -F /state/server.log']
          volumeMounts:
          - name: state
            mountPath: /state
            readOnly: true
          resources:
            limits:
              cpu: 100m
              ephemeral-storage: 1Gi
              memory: 50Mi
            requests:
              cpu: 100m
              ephemeral-storage: 1Gi
              memory: 50Mi
      volumes:
        - name: otel-config
          configMap:
            name: otel-config
            optional: true
        - name: entrypoint
          configMap:
            name: entrypoint
        - name: network-config
          configMap:
            name: network-config
        - name: server
          configMap:
            name: server
        - name: store-stats
          configMap:
            name: store-stats
  volumeClaimTemplates:
    - metadata:
        name: state
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi
